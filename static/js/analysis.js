let chart = null;
let candleSeries = null;
let volumeSeries = null;
let sma20Series = null;
let sma50Series = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function () {
    initializeChart();
    setupEventListeners();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTC/USDT
    loadAnalysisData();
});

function initializeChart() {
    const chartContainer = document.getElementById('candleChart');

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart = LightweightCharts.createChart(chartContainer, {
        width: chartContainer.clientWidth,
        height: 500,
        layout: {
            background: { color: 'transparent' },
            textColor: '#d1d4dc',
        },
        grid: {
            vertLines: { color: 'rgba(42, 46, 57, 0.5)' },
            horzLines: { color: 'rgba(42, 46, 57, 0.5)' },
        },
        crosshair: {
            mode: LightweightCharts.CrosshairMode.Normal,
        },
        rightPriceScale: {
            borderColor: 'rgba(197, 203, 206, 0.8)',
        },
        timeScale: {
            borderColor: 'rgba(197, 203, 206, 0.8)',
            timeVisible: true,
            secondsVisible: false,
        },
    });

    // –°–µ—Ä–∏—è —Å–≤–µ—á–µ–π
    candleSeries = chart.addCandlestickSeries({
        upColor: '#26a69a',
        downColor: '#ef5350',
        borderDownColor: '#ef5350',
        borderUpColor: '#26a69a',
        wickDownColor: '#ef5350',
        wickUpColor: '#26a69a',
    });

    // –°–µ—Ä–∏—è –æ–±—ä–µ–º–∞
    volumeSeries = chart.addHistogramSeries({
        color: '#26a69a',
        priceFormat: {
            type: 'volume',
        },
        priceScaleId: '', // –æ—Ç–¥–µ–ª—å–Ω–∞—è —à–∫–∞–ª–∞
        scaleMargins: {
            top: 0.8,
            bottom: 0,
        },
    });

    // SMA 20
    sma20Series = chart.addLineSeries({
        color: 'rgba(4, 111, 232, 1)',
        lineWidth: 2,
        title: 'SMA 20',
    });

    // SMA 50
    sma50Series = chart.addLineSeries({
        color: 'rgba(245, 166, 35, 1)',
        lineWidth: 2,
        title: 'SMA 50',
    });

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ä–∞–∑–º–µ—Ä—É –æ–∫–Ω–∞
    window.addEventListener('resize', function () {
        chart.applyOptions({
            width: chartContainer.clientWidth,
        });
    });
}

function setupEventListeners() {
    document.getElementById('loadDataBtn').addEventListener('click', loadAnalysisData);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä—ã –∏–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    document.getElementById('pairSelect').addEventListener('change', loadAnalysisData);
    document.getElementById('timeframeSelect').addEventListener('change', loadAnalysisData);
}

async function loadAnalysisData() {
    const pair = document.getElementById('pairSelect').value;
    const timeframe = document.getElementById('timeframeSelect').value;
    const useCache = document.getElementById('useCache').checked;

    const loadBtn = document.getElementById('loadDataBtn');
    const originalText = loadBtn.textContent;

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        loadBtn.innerHTML = '<div class="loading"></div> –ó–∞–≥—Ä—É–∑–∫–∞...';
        loadBtn.disabled = true;

        const response = await fetch('/api/analysis-data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                pair: pair,
                timeframe: timeframe,
                useCache: useCache,
            }),
        });

        const data = await response.json();

        if (data.success) {
            updateChart(data.data);
            updateIndicators(data.data.indicators);
            updateAnalysisText(data.data);
        } else {
            throw new Error(data.error);
        }

    } catch (error) {
        console.error('Error loading analysis data:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        loadBtn.innerHTML = originalText;
        loadBtn.disabled = false;
    }
}

function updateChart(analysisData) {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const candleData = analysisData.candles.map(candle => ({
        time: Math.floor(candle.openTime / 1000), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
        open: candle.open,
        high: candle.high,
        low: candle.low,
        close: candle.close,
    }));

    const volumeData = analysisData.candles.map(candle => ({
        time: Math.floor(candle.openTime / 1000),
        value: candle.volume,
        color: candle.close >= candle.open ? 'rgba(38, 166, 154, 0.8)' : 'rgba(239, 83, 80, 0.8)',
    }));

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π –¥–ª—è SMA (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫)
    const recentCandles = analysisData.candles.slice(-100);
    const sma20Data = recentCandles.map((candle, index, array) => {
        if (index < 19) return null; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 —Å–≤–µ—á–µ–π –¥–ª—è SMA20

        const start = Math.max(0, index - 19);
        const slice = array.slice(start, index + 1);
        const sum = slice.reduce((acc, c) => acc + c.close, 0);
        const sma = sum / slice.length;

        return {
            time: Math.floor(candle.openTime / 1000),
            value: sma,
        };
    }).filter(item => item !== null);

    const sma50Data = recentCandles.map((candle, index, array) => {
        if (index < 49) return null; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Å–≤–µ—á–µ–π –¥–ª—è SMA50

        const start = Math.max(0, index - 49);
        const slice = array.slice(start, index + 1);
        const sum = slice.reduce((acc, c) => acc + c.close, 0);
        const sma = sum / slice.length;

        return {
            time: Math.floor(candle.openTime / 1000),
            value: sma,
        };
    }).filter(item => item !== null);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    candleSeries.setData(candleData);
    volumeSeries.setData(volumeData);
    sma20Series.setData(sma20Data);
    sma50Series.setData(sma50Data);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    chart.timeScale().fitContent();
}

function updateIndicators(indicators) {
    // RSI
    const rsiValue = document.getElementById('rsiValue');
    const rsiStatus = document.getElementById('rsiStatus');
    rsiValue.textContent = indicators.RSI ? indicators.RSI.toFixed(2) : '-';

    if (indicators.RSI > 70) {
        rsiStatus.textContent = '–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å';
        rsiStatus.className = 'indicator-status status-bearish';
    } else if (indicators.RSI < 30) {
        rsiStatus.textContent = '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å';
        rsiStatus.className = 'indicator-status status-bullish';
    } else {
        rsiStatus.textContent = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ';
        rsiStatus.className = 'indicator-status status-neutral';
    }

    // SMA20
    const sma20Value = document.getElementById('sma20Value');
    const sma20Status = document.getElementById('sma20Status');
    sma20Value.textContent = indicators.SMA20 ? indicators.SMA20.toFixed(2) : '-';

    // SMA50
    const sma50Value = document.getElementById('sma50Value');
    const sma50Status = document.getElementById('sma50Status');
    sma50Value.textContent = indicators.SMA50 ? indicators.SMA50.toFixed(2) : '-';

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º SMA20 –∏ SMA50 –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
    if (indicators.SMA20 && indicators.SMA50) {
        if (indicators.SMA20 > indicators.SMA50) {
            sma20Status.textContent = 'üìà –í—ã—à–µ SMA50';
            sma20Status.className = 'indicator-status status-bullish';
            sma50Status.textContent = 'üìâ –ù–∏–∂–µ SMA20';
            sma50Status.className = 'indicator-status status-bearish';
        } else {
            sma20Status.textContent = 'üìâ –ù–∏–∂–µ SMA50';
            sma20Status.className = 'indicator-status status-bearish';
            sma50Status.textContent = 'üìà –í—ã—à–µ SMA20';
            sma50Status.className = 'indicator-status status-bullish';
        }
    }

    // MACD
    const macdValue = document.getElementById('macdValue');
    const macdStatus = document.getElementById('macdStatus');
    macdValue.textContent = indicators.MACD ? indicators.MACD.toFixed(4) : '-';

    if (indicators.MACD > 0) {
        macdStatus.textContent = '–ë—ã—á–∏–π';
        macdStatus.className = 'indicator-status status-bullish';
    } else {
        macdStatus.textContent = '–ú–µ–¥–≤–µ–∂–∏–π';
        macdStatus.className = 'indicator-status status-bearish';
    }
}

function updateAnalysisText(data) {
    const analysisText = document.getElementById('analysisText');
    const indicators = data.indicators;

    let analysis = '';

    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø–æ SMA
    if (indicators.SMA20 && indicators.SMA50) {
        if (indicators.SMA20 > indicators.SMA50) {
            analysis += 'üìà <strong>–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥</strong> - SMA20 –≤—ã—à–µ SMA50<br>';
        } else {
            analysis += 'üìâ <strong>–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥</strong> - SMA20 –Ω–∏–∂–µ SMA50<br>';
        }
    }

    // –ê–Ω–∞–ª–∏–∑ RSI
    if (indicators.RSI > 70) {
        analysis += '‚ö†Ô∏è <strong>–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å</strong> - RSI –≤—ã—à–µ 70. –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è<br>';
    } else if (indicators.RSI < 30) {
        analysis += 'üîÑ <strong>–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å</strong> - RSI –Ω–∏–∂–µ 30. –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫<br>';
    } else {
        analysis += '‚öñÔ∏è <strong>–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞</strong> - RSI –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-70<br>';
    }

    // –ê–Ω–∞–ª–∏–∑ MACD
    if (indicators.MACD > 0) {
        analysis += 'üêÇ <strong>–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª MACD</strong> - –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤—ã—à–µ –Ω—É–ª—è<br>';
    } else {
        analysis += 'üêª <strong>–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª MACD</strong> - –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –Ω–∏–∂–µ –Ω—É–ª—è<br>';
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    analysis += '<br><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong><br>';

    if (indicators.RSI > 70 && indicators.MACD > 0) {
        analysis += '‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏<br>';
        analysis += '‚Ä¢ –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏<br>';
    } else if (indicators.RSI < 30 && indicators.MACD < 0) {
        analysis += '‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º<br>';
        analysis += '‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã<br>';
    } else if (indicators.SMA20 > indicators.SMA50 && indicators.MACD > 0) {
        analysis += '‚Ä¢ –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥<br>';
        analysis += '‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è—Ö<br>';
    } else {
        analysis += '‚Ä¢ –†—ã–Ω–æ–∫ –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏<br>';
        analysis += '‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤<br>';
    }

    analysisText.innerHTML = analysis;
}

function showError(message) {
    const analysisText = document.getElementById('analysisText');
    analysisText.innerHTML = `<div style="color: var(--error-color);">‚ùå ${message}</div>`;
}